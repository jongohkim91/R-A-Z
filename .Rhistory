usethis::use_git()
library(usethis)
use_git()
use_github()
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
usethis::git_sitrep()
data <- gapminder::gapminder
unique(data$continent)
as.integer(data$continent[1])
#changing variable types
data$continent[1]
#character
as.character(data$continent[1])
#comparing factor with character
print(c("a", "b", "c"))
print(as.factor(c("a", "b", "c")))
#vector can only have one data type!
c(1,2,3)
c(1,"a")
temp
#list can have different data types and name them!
temp <- list("a", 1)
temp
# to change the list into a vector again
temp <- unlist(temp)
temp
#list can have sub-structures
temp <- list(country = c("France", "Germany"),
capital = c("Paris", "Berlin"),
population = c(67500000, 83130000))
temp
temp[1]
#slicing the list(and obtaining the sub-list value)
temp[1]
class(temp[1])
#list
temp[1]
class(temp[1])
#vector
temp[[1]]
class(temp[[1]])
#trying to access a value of a sub-list(country)
temp[1][1]
temp[[1]][1] #right
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", -999),
population = c(67500000, 83130000, "Non_existent"))
df %>%
filter(capital==-999)
library(dplyr)
df %>%
filter(capital==-999)
print(df$capital)
df %>%
filter(capital==-999)
df %>%
filter(population=="Non_existent")
df <- filter(df, country=="Luxembourg") #getting Luxembourg observation
df <- mutate(df, capital = "Luxembourg City") #changing the capital value for Luxembourg
df
df
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", NA),
population = c(67500000, 83130000, 639000))
#basic way
lux <- filter(df, country=="Luxembourg") #getting Luxembourg observation
lux <- mutate(df, capital = "Luxembourg City") #changing the capital value for Luxembourg
lux
#basic way
lux <- filter(df, country=="Luxembourg") #getting Luxembourg observation
lux <- mutate(lux, capital = "Luxembourg City") #changing the capital value for Luxembourg
lux
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", NA),
population = c(67500000, 83130000, 639000))
df
lux
#basic way
lux <- filter(df, country=="Luxembourg") #getting Luxembourg observation
lux <- mutate(lux, capital = "Luxembourg City") #changing the capital value for Luxembourg
lux
#piping!
lux <- df %>%
filter(country=="Luxembourg") %>%
mutate(capital = "Luxembourg City")
lux
lux
df <- df %>%
filter(capital=="-999") %>%
mutate(capital="Luxembourg City",
population = 639000)
df
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", -999),
population = c(67500000, 83130000, "Non_existent"))
df <- df %>%
filter(capital=="-999") %>%
mutate(capital="Luxembourg City",
population = 639000)
df
df
#re-creating the data frame
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", -999),
population = c(67500000, 83130000, "Non_existent"))
#changing the capital values!
df %>%
mutate(capital=ifelse(capital=="-999", #condition!
"Lux City", #if TRUE
"")) #if FALSE
#re-creating the data frame
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", -999),
population = c(67500000, 83130000, "Non_existent"))
df
#changing the capital values!
df %>%
mutate(capital=ifelse(capital=="-999", #condition!
"Lux City", #if TRUE
"FALSE")) #if FALSE
"FALSE")) #if FALSE
df %>%
mutate(capital=ifelse(capital=="-999", #condition!
"Lux City", #if TRUE
"FALSE")) #if FALSE
#keeping the other values
df <- df %>%
mutate(capital=ifelse(capital=="-999",
"Luxembourg City",
capital)) #keeping the rest values
#keeping the other values
df <- df %>%
mutate(capital=ifelse(capital=="-999",
"Luxembourg City",
capital)) #keeping the rest values
#changing the population as well
df <- df %>%
mutate(population=ifelse(population=="Non_existent",
639000,
population)) %>%
mutate(population = as.integer(population))
df
df
df <- df %>%
mutate(total_pop = sum(population))
df
df
#saving the value
temp_pop <- df %>%
filter(country %in% c("France", "Luxembourg")) %>%
summarize(french_pop = sum(population)) %>%
unlist()
temp_pop
#and then creating the column
df <- df %>%
mutate(french_pop = temp_pop)
df
df
df <- df %>%
#creating a column that indicates whether a country speaks french
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
#grouping by french column
group_by(french) %>%
#creating a new column
mutate(french_pop = ifelse(french==T,
sum(population),
NA)) %>%
ungroup() #important!
df
df <- df %>%
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
group_by(french) %>%
mutate(french_pop = ifelse(french==T,
sum(population),
NA))
#results in grouped sum by french still!
df %>%
mutate(temp = sum(population))
df %>%
mutate(temp = sum(population))
df <- data.frame(country = "France",
capital = "Pairs",
population = 67500000,
Y1950_population = NA,
Y1960_population = "",
Y1970_population = -999)
df
#check the column names of df
colnames(df)
#find the columns you want to delete!
grep("^Y", colnames(df))
grepl("^Y", colnames(df))
#declare the columns you want to erase!
del_cols <- colnames(df)[grep("^Y", colnames(df))]
del_cols
#exclude the columns!
df <- df %>%
select(-all_of(del_cols))
df
#setting the data sets
x.df <- data.frame(id = c(1,2),
country = c("France", "Germany"),
capital = c("Paris", "Berlin"),
population = c(67500000, 83130000))
y.df <- data.frame(id = c(2,3),
country = c("Germany", "Luxembourg"),
capital = c( "Berlin", "Luxembourg City"),
language = c( "DE",  "FR"))
merged.df <- left_join(x = x.df,
y = y.df,
by = "id") #by which column will you merge
merged.df
merged.df
merged.df <- right_join(x = x.df,
y = y.df,
by = "id") #by which column will you merge
y = y.df,
merged.df
merged.df <- inner_join(x = x.df,
y = y.df,
by = "id") #by which column will you merge
merged.df
merged.df <- full_join(x = x.df,
y = y.df,
by = "id") #by which column will you merge
merged.df
merged.df <- left_join(x = x.df,
y = y.df,
by = "id", #by which column will you merge
suffix = c(".population", ".language"))
merged.df
merged.df
#delete redundant columns
##retrieving column names that has ".language"
grepl(".language", colnames(merged.df))
del_cols <- colnames(merged.df)[grepl(".language", colnames(merged.df))]
##remove!
merged.df <- merged.df %>%
select(-all_of(del_cols))
merged.df
#rename column names
##declaring the column names you want to have
col_names <- gsub(".population", "", colnames(merged.df)) #removing all the ".population" part
colnames(merged.df) <- col_names
#filling in the language column for France
merged.df <- merged.df %>%
mutate(language = ifelse(country=="France",
"FR",
language))
merged.df
library(gapminder)
#reading in the data
data <- gapminder
data %>%
filter(continent=="Europe") %>%
summarise(life_avg_eu = mean(lifeExp))
data %>%
group_by(continent) %>%
summarise(life_avg = mean(lifeExp),
life_sd = sd(lifeExp))
life_sum.df <- data %>%
group_by(continent) %>%
summarise(life_avg = mean(lifeExp),
life_sd = sd(lifeExp))
life_sum.df
ols <- lm(formula = lifeExp ~ gdpPercap + continent,
data = data)
ols
summary(ols)
#ols result!
ols_result <- summary(ols)
#checking the coefficients
ols_result$coefficients
class(ols_result$coefficients)
#scientific notation
ols_result$coefficients[,1]
format(ols_result$coefficients[,1], scientific = F)
round(ols_result$coefficients[,1],4)
#reading in data again
data <- gapminder::gapminder
#simple line graph for Italy
data %>%
filter(country=="Italy") %>%
ggplot() +
geom_point(aes(x = year, y = gdpPercap))
library(ggplot2)
#simple line graph for Italy
data %>%
filter(country=="Italy") %>%
ggplot() +
geom_point(aes(x = year, y = gdpPercap))
#simple line graph for some European countries
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_point(aes(x = year, y = gdpPercap))
#simple dot graph for some European countries
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_point(aes(x = year, y = gdpPercap, color = country)) #note that it is important to put color = country inside of aes()
#simple bar(column) graph for some European countries
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_col(aes(x = year, y = gdpPercap, color = country)) #note that it is important to put color = country inside of aes()
#for bar graphs you should use fill!
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_col(aes(x = year, y = gdpPercap, fill = country)) #note that it is important to put color = country inside of aes()
#simple line graph for some European countries
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_line(aes(x = year, y = gdpPercap, color = country)) +
labs(x="Year", y="Real GDP per capita in USD")
#simple line graph for some European countries
data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_line(aes(x = year, y = gdpPercap, color = country)) +
labs(x="Year", y="Real GDP per capita in USD",
title = "Plotting GDP per Capita of Five European Countires over Time") +
theme(legend.position = "bottom",
legend.title = element_text(size = 20), #changing legend title size
legend.text = element_text(size = 20), #changing legend text size
axis.text.x = element_text(size = 15), #changing axis text size
axis.title.x = element_text(size = 20), #changing axis title size
axis.text.y = element_text(size = 15), #changing axis text size
axis.title.y = element_text(size = 20), #changing axis title size
title = element_text(size = 20)) #changing title size
#simple line graph for some European countries
base_plot <- data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain")) %>%
ggplot() +
geom_line(aes(x = year, y = gdpPercap, color = country)) +
labs(x="Year", y="Real GDP per capita in USD",
title = "Plotting GDP per Capita of Five European Countires over Time") +
theme(legend.position = "bottom",
legend.title = element_text(size = 20), #changing legend title size
legend.text = element_text(size = 20), #changing legend text size
axis.text.x = element_text(size = 15), #changing axis text size
axis.title.x = element_text(size = 20), #changing axis title size
axis.text.y = element_text(size = 15), #changing axis text size
axis.title.y = element_text(size = 20),  #changing axis title size
title = element_text(size = 20), #changing title size
legend.key.size = unit(1.5, 'cm')) + #changing legend color box size
scale_color_discrete(name = "Country") +#changing legend title
scale_y_continuous(labels= scales::comma) #formatting the y axis tick
base_plot
#creating the GDP text data frame
gdp_text.df <- data %>%
filter(country %in% c("United Kingdom", "Italy")) %>%
filter(year==1952 | year==2007)
#adding the text layer
final_plot <- base_plot +
geom_text(data = gdp_text.df,
aes(x = year, y = gdpPercap, label = gdpPercap))
final_plot
```
#creating the GDP text data frame
gdp_text.df <- data %>%
filter(country %in% c("United Kingdom", "Italy")) %>%
filter(year==1952 | year==2007)
#adding the text layer
mid_plot <- base_plot +
geom_text(data = gdp_text.df,
aes(x = year, y = gdpPercap, label = gdpPercap),
size = 7, #size adjustment
vjust = 0.7) #position adjustment
mid_plot
#creating the GDP text data frame
gdp_text.df <- data %>%
filter(country %in% c("United Kingdom", "Italy")) %>%
filter(year==1952 | year==2007)
#adding the text layer
mid_plot <- base_plot +
geom_text(data = gdp_text.df,
aes(x = year, y = gdpPercap, label = round(gdpPercap)), #rounding up the GDP!
size = 7, #size adjustment
vjust = 0.7) #position adjustment
mid_plot
#adding the text layer
mid_plot <- base_plot +
geom_text(data = gdp_text.df,
aes(x = year, y = gdpPercap,
label = format(round(gdpPercap), big.mark = ",", big.interval = 3L)), #rounding up the GDP and adding a comma!!
size = 7, #size adjustment
vjust = 0.7) #position adjustment
mid_plot
#creating the country text data frame
country_text.df <- data %>%
filter(country %in% c("United Kingdom", "Germany", "France", "Italy", "Spain"))%>%
filter(year==2002)
#adding the text layer
final_plot <- mid_plot +
geom_text(data = country_text.df,
aes(x = year, y = gdpPercap, label = country, color = country),
size = 7,
vjust = 0.7,
show.legend = F) #not showing the legend
final_plot
```
temp <- list(country = c("France", "Germany"),
capital = c("Paris", "Berlin"),
population = c(67500000, 83130000))
temp$country
## list and vectors
## Cleaning missing values
'[1] "France"'temp$country[1]
temp$country[1]
df <- data.frame(country = c("France", "Germany", "Luxembourg"),
capital = c("Paris", "Berlin", -999),
population = c(67500000, 83130000, "Non_existent"))
df <- df %>%
#creating a column that indicates whether a country speaks french
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
#grouping by french column
group_by(french) %>%
#creating a new column
mutate(french_pop = ifelse(french==T,
sum(population),
NA)) %>%
ungroup() #important!
library(dplyr)
df <- df %>%
#creating a column that indicates whether a country speaks french
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
#grouping by french column
group_by(french) %>%
#creating a new column
mutate(french_pop = ifelse(french==T,
sum(population),
NA)) %>%
ungroup() #important!
df
df %>%
#creating a column that indicates whether a country speaks french
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
#grouping by french column
group_by(french) %>%
#creating a new column
mutate(french_pop = ifelse(french==T,
sum(population),
NA)) %>%
ungroup() #important!
df$population
df <- df %>%
mutate(population=ifelse(population=="Non_existent",
639000,
population)) %>%
mutate(population = as.integer(population))
df
df <- df %>%
mutate(capital=ifelse(capital=="-999",
"Luxembourg City",
capital)) #keeping the rest values
df <- df %>%
#creating a column that indicates whether a country speaks french
mutate(french = ifelse(country %in% c("France", "Luxembourg"),
T,
F)) %>%
#grouping by french column
group_by(french) %>%
#creating a new column
mutate(french_pop = ifelse(french==T,
sum(population),
NA)) %>%
ungroup() #important!
df
df %>%
select(-french_pop, -french)
df %>%
select(country, capital, population, total_pop)
```{r}
df
df <- df %>%
mutate(total_pop = sum(population))
df
df %>%
select(country, capital, population, total_pop)
#declare the columns of interest first!
cols <- c("country", "capital", "population", "total_pop")
df %>%
select(all_of(cols)) #there is also any_of()
df <- data.frame(country = "France",
capital = "Pairs",
population = 67500000,
Y1950_population = NA,
Y1960_population = "",
Y1970_population = -999)
df
#check the column names of df
colnames(df)
#find the columns you want to delete!
grep("^Y", colnames(df))
grepl("^Y", colnames(df))
#declare the columns you want to erase!
del_cols <- colnames(df)[grep("^Y", colnames(df))]
del_cols
